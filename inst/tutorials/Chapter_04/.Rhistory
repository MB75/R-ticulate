groups <- my_dat %>% group_by(ID) %>%  mutate(group = sample(c("train", "test"), 1, replace = TRUE, prob = c(0.5, 0.5) ))
groups
# Create more data to better demonstrate grouping effect
my_dat <-
data.frame(ID = as.factor(rep(1:3, each = 9)), Var = sample(1:100, 27))
groups <- my_dat %>% group_by(ID) %>%  mutate(group = sample(c("train", "test"), 1, replace = TRUE, prob = c(0.5, 0.5) ))
groups
my_dat
groups
groups <- my_dat %>% group_by(ID) %>%  mutate(group = sample(c("train", "test"), 1, replace = TRUE, prob = c(0.5, 0.5))) %>% as.data.frame()
groups
groups <- my_dat %>% group_by(ID) %>% rowwise() %>%  mutate(group = sample(c("train", "test"), 1, replace = TRUE, prob = c(0.5, 0.5))) %>% as.data.frame()
groups
# Create more data to better demonstrate grouping effect
my_dat <-
data.frame(ID = as.factor(rep(1:3, each = 10)), Var = sample(1:100, 30))
groups <- my_dat %>% group_by(ID) %>% rowwise() %>%  mutate(group = sample(c("train", "test"), 1, replace = TRUE, prob = c(0.5, 0.5))) %>% as.data.frame()
groups
groups <- my_dat %>% group_by(ID) %>% rowwise() %>%  mutate(group = sample(c("train", "test"), 1, replace = TRUE, prob = c(0.8, 0.2))) %>% as.data.frame()
groups
sample
?sample
sample(letters[1:2], size = 10, prob = c(0.8, 0.2))
sample(letters[1:2], size = 10, prob = c(0.8, 0.2), replace = T)
table(sample(letters[1:2], size = 10, prob = c(0.8, 0.2), replace = T))
table(sample(letters[1:2], size = 10, prob = c(0.8, 0.2), replace = T))
table(sample(letters[1:2], size = 10, prob = c(0.8, 0.2), replace = T))
table(sample(letters[1:2], size = 10, prob = c(0.8, 0.2), replace = T))
table(sample(letters[1:2], size = 10, prob = c(0.8, 0.2), replace = T))
table(sample(letters[1:2], size = 10, prob = c(0.8, 0.2), replace = T))
table(sample(letters[1:2], size = 10, prob = c(0.8, 0.2), replace = T))
table(sample(letters[1:2], size = 10, prob = c(0.8, 0.2), replace = T))
table(sample(letters[1:2], size = 10, prob = c(0.8, 0.2), replace = T))
table(sample(letters[1:2], size = 10, prob = c(0.8, 0.2), replace = T))
table(sample(letters[1:2], size = 10, prob = c(0.8, 0.2), replace = T))
groups <- my_dat %>% group_by(ID) %>% mutate(group = sample(c("train", "test"), size = n(), replace = TRUE, prob = c(0.8, 0.2))) %>% as.data.frame()
groups
table(groups$group)
6/30
my_dat
my_dat <- my_dat %>%
left_join(groups)
my_dat
groups
iris
groups <- iris %>% group_by(Species) %>% mutate(group = sample(c("train", "test"), size = n(), replace = TRUE, prob = c(0.8, 0.2))) %>% as.data.frame()
groups
table(groups$group)
32/150
groups <- iris %>% group_by(Species) %>% mutate(group = sample(c("train", "test"), size = n(), replace = TRUE, prob = c(0.8, 0.2))) %>% as.data.frame()
groups
table(groups$group)
31/150
30/150
groups <- iris %>% group_by(Species) %>% mutate(group = sample(c("train", "test"), size = n(), replace = TRUE, prob = c(0.8, 0.2))) %>% as.data.frame()
groups
table(groups$group)
groups <- iris %>% group_by(Species) %>% mutate(group = sample(c("train", "test"), size = n(), replace = TRUE, prob = c(0.8, 0.2))) %>% as.data.frame()
groups
table(groups$group)
groups <- iris %>% group_by(Species) %>% mutate(group = sample(c("train", "test"), size = n(), replace = TRUE, prob = c(0.8, 0.2))) %>% as.data.frame()
groups
table(groups$group)
groups <- iris %>% group_by(Species) %>% mutate(group = sample(c("train", "test"), size = n(), replace = TRUE, prob = c(0.8, 0.2))) %>% as.data.frame()
groups
table(groups$group)
groups <- iris %>% group_by(Species) %>% mutate(group = sample(c("train", "test"), size = n(), replace = TRUE, prob = c(0.8, 0.2))) %>% as.data.frame()
groups
table(groups$group)
groups <- iris %>% group_by(Species) %>% mutate(group = sample(c("train", "test"), size = n(), replace = TRUE, prob = c(0.8, 0.2))) %>% as.data.frame()
groups
table(groups$group)
groups <- iris %>% group_by(Species) %>% mutate(group = sample(c("train", "test"), size = n(), replace = TRUE, prob = c(0.8, 0.2))) %>% as.data.frame()
groups
table(groups$group)
groups <- iris %>% group_by(Species) %>% mutate(group = sample(c("train", "test"), size = n(), replace = TRUE, prob = c(0.8, 0.2))) %>% as.data.frame()
groups
table(groups$group)
groups <- iris %>% group_by(Species) %>% mutate(group = sample(c("train", "test"), size = n(), replace = TRUE, prob = c(0.8, 0.2))) %>% as.data.frame()
groups
table(groups$group)
groups <- iris %>% group_by(Species) %>% mutate(group = sample(c("train", "test"), size = n(), replace = TRUE, prob = c(0.8, 0.2))) %>% as.data.frame()
groups
table(groups$group)
groups <- iris %>% group_by(Species) %>% mutate(group = sample(c("train", "test"), size = n(), replace = TRUE, prob = c(0.8, 0.2))) %>% as.data.frame()
groups
table(groups$group)
groups <- iris %>% group_by(Species) %>% mutate(group = sample(c("train", "test"), size = n(), replace = TRUE, prob = c(0.8, 0.2))) %>% as.data.frame()
groups
table(groups$group)
groups <- iris %>% group_by(Species) %>% mutate(group = sample(c("train", "test"), size = n(), replace = TRUE, prob = c(0.8, 0.2))) %>% as.data.frame()
groups
table(groups$group)
groups <- iris %>% group_by(Species) %>% mutate(group = sample(c("train", "test"), size = n(), replace = TRUE, prob = c(0.8, 0.2))) %>% as.data.frame()
groups
table(groups$group)
?ungroup
nrow(iris)*0.8
?sample_frac
?slice_sample
stratified_sample <- iris %>%
group_by(Species) %>%
mutate(num_rows = n()) %>%
slice_sample(prop = 0.8, weight = num_rows) %>%
ungroup %>% as.data.frame()
stratified_sample <- iris %>%
group_by(Species) %>%
mutate(num_rows = n()) %>%
slice_sample(prop = 0.8, weight_by = num_rows) %>%
ungroup %>% as.data.frame()
nrow(stratified_sample)
stratified_sample
stratified_sample <- iris %>%
group_by(Species) %>%
slice_sample(prop = 0.8) %>% as.data.frame()
nrow(stratified_sample)
stratified_sample
# car_split <- group_initial_split(data = mtcars, group = cyl, prop = 4/5)
iris_split <- initial_split(iris, strata = Species, prop = 0.8)
iris_split
train_data <- training(iris_split)
nrow(train_data)
test_data <- testing(iris_split)
nrow(test_data)
test_data
iris_split <- group_initial_split(data = iris, group = Species, prop = 4/5)
iris_split
iris_split <- group_initial_split(data = iris, group = Species, prop = 4/5)
iris_split
iris_split <- group_initial_split(data = iris, group = Species, prop = 0.8)
iris_split
iris_split <- initial_split(iris, strata = Species, prop = 0.8)
iris_split
train_data <- training(iris_split)
nrow(train_data)
test_data <- testing(iris_split)
nrow(test_data)
test_data
mtcars %>% slice_sample(weight_by = wt, n = 5)
group_by(.data = iris, Species) %>% slice_sample(prop = 0.8)
stratified_sample <- group_by(.data = iris, Species) %>% slice_sample(prop = 0.8) %>% as.data.frame()
stratified_sample
stratified_sample <- group_by(.data = iris, Species) %>% slice_sample(prop = 0.8)
stratified_sample
rownames(stratified_sample)
group_by(.data = iris, Species) %>% mutate(num_rows = n())
stratified_sample <- mutate(.data = iris, id = row_number()) %>% group_by(.data = iris, Species) %>% slice_sample(prop = 0.8) %>% as.data.frame()
stratified_sample <- mutate(.data = iris, id = row_number()) %>% group_by(Species) %>% slice_sample(prop = 0.8) %>% as.data.frame()
stratified_sample
iris[7, ]
train <- mutate(.data = iris, id = row_number()) %>% group_by(Species) %>% slice_sample(prop = 0.8) %>% as.data.frame()
test <- anti_join(x = iris, y = train, by = "id")
## Add a row ID
iris <- mutate(.data = iris, id = row_number())
iris
train <- group_by(.data = iris, Species) %>% slice_sample(prop = 0.8) %>% as.data.frame()
train
test <- anti_join(x = iris, y = train, by = "id")
test
## Examine the structure of the dataset
str(iris)
## Check the summary
summary(iris)
## View the first few observations
head(iris)
## Alternative approach
groups <- group_by(.data = iris, id) %>% mutate(group = sample(c("train", "test"), size = n(), replace = TRUE, prob = c(0.8, 0.2))) %>% as.data.frame()
groups
table(groups$group)
groups <- group_by(.data = iris, id) %>% mutate(group = sample(c("train", "test"), size = n(), replace = TRUE, prob = c(0.8, 0.2))) %>% as.data.frame()
groups
table(groups$group)
groups <- group_by(.data = iris, id) %>% mutate(group = sample(c("train", "test"), size = n(), replace = TRUE, prob = c(0.8, 0.2))) %>% as.data.frame()
groups
table(groups$group)
groups <- group_by(.data = iris, id) %>% mutate(group = sample(c("train", "test"), size = n(), replace = TRUE, prob = c(0.8, 0.2))) %>% as.data.frame()
groups
table(groups$group)
groups <- group_by(.data = iris, id) %>% mutate(group = sample(c("train", "test"), size = n(), replace = TRUE, prob = c(0.8, 0.2))) %>% as.data.frame()
groups
table(groups$group)
groups <- group_by(.data = iris, id) %>% mutate(group = sample(c("train", "test"), size = n(), replace = TRUE, prob = c(0.8, 0.2))) %>% as.data.frame()
groups
table(groups$group)
groups <- group_by(.data = iris, Species) %>% mutate(group = sample(c("train", "test"), size = n(), replace = TRUE, prob = c(0.8, 0.2))) %>% as.data.frame()
groups
table(groups$group)
groups <- group_by(.data = iris, Species) %>% mutate(group = sample(c("train", "test"), size = n(), replace = TRUE, prob = c(0.8, 0.2))) %>% as.data.frame()
groups
table(groups$group)
groups <- group_by(.data = iris, Species) %>% mutate(group = sample(c("train", "test"), size = n(), replace = TRUE, prob = c(0.8, 0.2))) %>% as.data.frame()
groups
table(groups$group)
groups
## Alternative approach leaving the dataset intact by simply adding a binary variable indicating whether an observation belongs to the training or the test subset.
train_test <- group_by(.data = iris, Species) %>% mutate(group = sample(c("train", "test"), size = n(), replace = TRUE, prob = c(0.8, 0.2))) %>% as.data.frame()
# groups
table(train_test$group)
xtabs(~ group, data = train_test)
xtabs(~ group, data = train_test)
## Alternative approach leaving the dataset intact by simply adding a binary variable indicating whether an observation belongs to the training or the test subset.
train_test <- group_by(.data = iris, Species) %>% mutate(set = sample(c("train", "test"), size = n(), replace = TRUE, prob = c(0.8, 0.2))) %>% as.data.frame()
xtabs(~ set, data = train_test)
train_test <- group_by(.data = iris, Species) %>% mutate(set = sample(c("train", "test"), size = n(), replace = TRUE, prob = c(0.8, 0.2))) %>% as.data.frame()
xtabs(~ set, data = train_test)
train_test <- group_by(.data = iris, Species) %>% mutate(set = sample(c("train", "test"), size = n(), replace = TRUE, prob = c(0.8, 0.2))) %>% as.data.frame()
xtabs(~ set, data = train_test)
train_test <- group_by(.data = iris, Species) %>% mutate(set = sample(c("train", "test"), size = n(), replace = TRUE, prob = c(0.8, 0.2))) %>% as.data.frame()
xtabs(~ set, data = train_test)
train_test <- group_by(.data = iris, Species) %>% mutate(set = sample(c("train", "test"), size = n(), replace = TRUE, prob = c(0.8, 0.2))) %>% as.data.frame()
xtabs(~ set, data = train_test)
train_test <- group_by(.data = iris, Species) %>% mutate(set = sample(c("train", "test"), size = n(), replace = TRUE, prob = c(0.8, 0.2))) %>% as.data.frame()
xtabs(~ set, data = train_test)
train_test <- group_by(.data = iris, Species) %>% mutate(set = sample(c("train", "test"), size = n(), replace = TRUE, prob = c(0.8, 0.2))) %>% as.data.frame()
xtabs(~ set, data = train_test)
ftable(xtabs(~ set, data = train_test))
ftable(xtabs(~ set, data = train_test))
ftable(table(train_test$set))
xtabs(~ set, data = train_test)
gl(n = 5, k = 6, labels = LETTERS[1:5])
## Create a random 80/20 data split
## Base R
## First, generate a random row index for the training subset comprising 80 % of the rows in the original dataset. Use the round() function to round the number of rows to the nearest integer.
train_index <- sample(x = 1:nrow(rock), size = round(0.8 * nrow(rock)), replace = F) # 38 out of the original 48 rows
## Create the training subset
train <- rock[train_index, ]
train # Note the row index corresponding to the values in train_index
## Load dataset
data(rock)
## View the first few observations
head(rock)
## Determine the number of rows in the dataset
nrow(rock)
## Create a random 80/20 data split
## Base R
## First, generate a random row index for the training subset comprising 80 % of the rows in the original dataset. Use the round() function to round the number of rows to the nearest integer.
train_index <- sample(x = 1:nrow(rock), size = round(0.8 * nrow(rock)), replace = F) # 38 out of the original 48 rows
train_index
## Create the training subset
train <- rock[train_index, ]
train # Note the row index corresponding to the values in train_index
train_index
## Create the test subset (the complement of the train_index) simply by removing the rows designated to the training subset from the original dataset.
test <- rock[-train_index, ]
test
## Check
xtabs(~ set, data = train_test)
## Alternative approach leaving the dataset intact by simply adding a binary variable indicating whether an observation belongs to the training or the test set.
train_test <- group_by(.data = iris, Species) %>% mutate(set = sample(c("train", "test"), size = n(), replace = TRUE, prob = c(0.8, 0.2))) %>% as.data.frame()
train_test
head(train_test)
head(train_test, n = 10)
## Check split (recall that this is a random process, so values will vary each time you recreate the 'train_test' object)
xtabs(~ set, data = train_test)
iris_split
## Add a row ID
iris <- mutate(.data = iris, id = row_number())
train <- group_by(.data = iris, Species) %>% slice_sample(prop = 0.8) %>% as.data.frame()
test <- anti_join(x = iris, y = train, by = "id")
train
test
## Stratified random sampling using the 'rsample' package
iris_split <- initial_split(iris, strata = Species, prop = 0.8)
iris_split
train_data <- training(iris_split)
train_data
test_data <- testing(iris_split)
nrow(test_data)
nrow(test_data)
train_data <- training(iris_split)''
nrow(test_data)
nrow(train_data)
test_data
## Add a row ID
iris <- mutate(.data = iris, id = row_number())
## Create the training set
train <- group_by(.data = iris, Species) %>% slice_sample(prop = 0.8) %>% as.data.frame()
nrow(train)
nrow(test)
test
row_number(rock)
## Using the dplyr package (tidyverse approach)
## Add row ID
rock <- mutate(.data = rock, id = row_number())
rock
## Generate replicated treatment levels
treat <- gl(n = 5, k = 6, labels = LETTERS[1:5])
data.frame(sample(treat))
## Generate replicated treatment levels
treat <- gl(n = 5, k = 6, labels = LETTERS[1:5])
unit <- sample(x = 1:30, size = 30, replace = F)
dat <- data.frame(treat, unit)
dat
data.frame(sample = sample(treat))
## Generate replicated treatment levels
treat <- gl(n = 5, k = 6, labels = LETTERS[1:5])
unit <- sample(x = 1:30, size = 30, replace = F)
dat <- data.frame(treat, unit)
dat
## Generate a random sample of 10 letters from the alphabet
sample(x = LETTERS, size = 10)
## Sample 5 elements allowing replacement
sample(x = 1:5, size = 5, replace = T)
## Sample 5 elements allowing replacement
sample(x = 1:5, size = 5, replace = T)
sample(x = 1:5, size = 5, replace = T)
sample(x = 1:5, size = 5, replace = T)
sample(x = 1:5, size = 5, replace = T)
sample(x = 1:5, size = 5, replace = T)
sample(x = 1:5, size = 5, replace = T)
sample(x = 1:5, size = 5, replace = T)
sample(x = 1:5, size = 5, replace = T)
sample(x = 1:5, size = 5, replace = T)
sample(x = 1:5, size = 5, replace = T)
?sample
probs <- c(0.1, 0.2, 0.3, 0.4)
## Sample 5 elements allowing replacement
animals <- c("rat", "cheetah", "okapi", "elephant")
probs <- c(0.1, 0.2, 0.3, 0.4)
sample(x = animals, size = 10, replace = T, prob = probs)
animals
## Sample 5 elements allowing replacement
animals <- c("rat", "cheetah", "okapi", "elephant")
probs <- c(0.1, 0.2, 0.3, 0.4)
sample(x = animals, size = 10, replace = T, prob = probs)
sample(x = animals, size = 10, replace = T, prob = probs)
sample(x = animals, size = 10, replace = T, prob = probs)
sample(x = animals, size = 10, replace = T, prob = probs)
## View the first few observations
head(iris)
head(PlantGrowth)
data()
ChickWeight
Formaldehyde
InsectSprays
OrchardSprays
ToothGrowth
trees
data(trees)
trees
Orange
sleep
pathology
CO2
ChickWeight
coplot(weight ~ Time | Chick, data = ChickWeight,
type = "b", show.given = FALSE)
str(coplot(weight ~ Time | Chick, data = ChickWeight,
type = "b", show.given = FALSE))
str(ChickWeight)
summary(ChickWeight)
treat <- gl(n = 3, k = 75)
treat
treat <- gl(n = 3, k = 15)
treat
treat <- gl(n = 3, k = 15)
treat
treat <- gl(n = 3, k = 50)
treat
treat <- gl(n = 3, k = 30)
treat
treat <- gl(n = 3, k = 30)
treat
treat <- gl(n = 3, k = 30, labels = c("control", "low", "high"))
treat
id <- gl(n = 5, k = 6)
id
id <- gl(n = 5, k = 6, length = 3)
id
id <- gl(n = 5, k = 6, length = 90)
id
data.frame(treat, id)
cond <- rnorm(n = 90, mean = 5)
data.frame(treat, id, cond)
cond <- round(rnorm(n = 90, mean = 5), digits = 2)
data.frame(treat, id, cond)
location <- gl(n = 3, k = 30, labels = c("A", "B", "C"))
bird_individual <- gl(n = 5, k = 6, length = 90)
bird_individual
iso <- round(rnorm(n = 90, mean = 0.71), digits = 2)
iso
iso <- round(rnorm(n = 90, mean = 0.71, sd = 0.01), digits = 2)
iso
iso <- round(rnorm(n = 90, mean = 0.7100, sd = 0.001), digits = 2)
iso
iso <- round(rnorm(n = 90, mean = 0.71, sd = 0.001), digits = 4)
iso
iso <- round(rnorm(n = 90, mean = 0.71, sd = 0.002), digits = 4)
iso
iso <- round(rnorm(n = 90, mean = 0.71, sd = 0.0015), digits = 4)
iso
data.frame(location, bird_individual, feather = 1:5, iso)
feathers <- data.frame(location, bird_individual, feather_id = 1:5, iso)
feathers
## View the first few rows of the data frame
head(feathers)
## View the first few rows of the data frame
head(feathers, 10)
nrow(feathers)
sample(x = animals, size = 10, replace = T, prob = probs)
sample(x = animals, size = 10, replace = T, prob = probs)
sample(x = animals, size = 10, replace = T, prob = probs)
sample(x = animals, size = 10, replace = T, prob = probs)
sample(x = animals, size = 10, replace = T, prob = probs)
sample(x = animals, size = 10, replace = T, prob = probs)
sample(x = animals, size = 10, replace = T, prob = probs)
sample(x = animals, size = 10, replace = T, prob = probs)
sample(x = animals, size = 10, replace = T, prob = probs)
sample(x = animals, size = 10, replace = T, prob = probs)
sample(x = animals, size = 10, replace = T, prob = probs)
sample(x = animals, size = 10, replace = T, prob = probs)
sample(x = animals, size = 10, replace = T, prob = probs)
sample(x = animals, size = 10, replace = T, prob = probs)
sample(x = animals, size = 10, replace = T, prob = probs)
sample(x = animals, size = 10, replace = T, prob = probs)
## View the first few rows of the data frame
head(feathers)
table(feathers)
table(feathers$bird_individual, feathers$feather_id)
summary(feathers)
str(feathers)
feathers <- data.frame(location, bird_individual, feather_id = factor(1:5), iso)
location <- gl(n = 3, k = 30, labels = c("A", "B", "C"))
bird_individual <- gl(n = 5, k = 6, length = 90)
iso <- round(rnorm(n = 90, mean = 0.71, sd = 0.0015), digits = 4)
feathers <- data.frame(location, bird_individual, feather_id = factor(1:5), iso)
## View the first few rows of the data frame
head(feathers)
str(feathers)
bird_individual <- gl(n = 5, k = 6, length = 90)
bird_individual
bird_individual
location
90/5
factor(rep(1:5, times = 18))
location <- gl(n = 3, k = 30, labels = c("A", "B", "C"))
bird_individual <- gl(n = 5, k = 6, length = 90)
iso <- round(rnorm(n = 90, mean = 0.71, sd = 0.0015), digits = 4)
feathers <- data.frame(location, bird_individual, feather_id = factor(rep(1:5, times = 18)), iso)
## View the first few rows of the data frame
head(feathers)
str(feathers)
feathers$bird_individual
90/6
location <- gl(n = 3, k = 30, labels = c("A", "B", "C"))
bird_individual <- gl(n = 5, k = 6, length = 90)
iso <- round(rnorm(n = 90, mean = 0.71, sd = 0.0015), digits = 4)
feathers <- data.frame(location, bird_individual, feather_id = factor(rep(1:6, times = 15)), iso)
## View the first few rows of the data frame
head(feathers)
str(feathers)
PlantGrowth
anova(lm(weight ~ group, data = PlantGrowth))
## Load dataset
data(PlantGrowth)
## View the first few rows of the data frame
head(PlantGrowth)
PlantGrowth
anova(lm(weight ~ group, data = PlantGrowth))
paste("batch", 1:4)
rep(paste0("batch", 1:4), times = 9)
rep(paste0("batch", 1:4), times = 3)
rep(paste0("batch", 1:4), times = 9)
rep(paste0("batch", 1:4), times = 3, each = 3)
rep(paste0("batch", 1:4), each = 9)
sample(seq(6.8, 7.5, by = 0.05), size = 36)
sample(seq(6.8, 7.5, by = 0.05), size = 36, replace = T)
# pH measurements for three different times from the same batch
milk <- data.frame(
batch = rep(paste0("batch", 1:4), each = 9),
time = rep(c("Morning", "Noon", "Evening"), each = 3),
pH = sample(seq(6.8, 7.5, by = 0.05), size = 36, replace = T)
)
milk
# Simulate pH data for batches of milk sampled at different times
set.seed(123)  # For reproducibility
# pH measurements for three different times from the same batch
milk <- data.frame(
batch = rep(1:4, each = 9),
time = rep(c("Morning", "Noon", "Evening"), each = 3),
pH = sample(seq(6.8, 7.5, by = 0.05), size = 36, replace = T)
)
# pH measurements for three different times from the same batch
milk <- data.frame(
batch = rep(1:4, each = 9),
time = rep(c("Morning", "Noon", "Evening"), each = 3),
pH = sample(seq(6.8, 7.5, by = 0.05), size = 36, replace = T)
)
milk
72/3
# Simulate pH data for batches of milk sampled at different times
set.seed(123)  # For reproducibility
# pH measurements for three different times from the same batch
milk <- data.frame(
batch = rep(1:4, each = 18),
treat = rep(c("control", "preservative"), each = 3, times = 24),
time = rep(c("Morning", "Noon", "Evening"), each = 6),
pH = sample(seq(6.8, 7.5, by = 0.05), size = 36, replace = T)
)
milk
# pH measurements for three different times from the same batch
milk <- data.frame(
batch = rep(1:4, each = 18),
treat = rep(c("control", "preservative"), each = 3, times = 24),
time = rep(c("Morning", "Noon", "Evening"), each = 6),
pH = sample(seq(6.8, 7.5, by = 0.05), size = 36, replace = T)
)
milk
## View the first few observations
head(milk)
## View the first few observations
head(milk, n = 10)
