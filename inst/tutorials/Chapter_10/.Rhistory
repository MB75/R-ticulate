(48.78-45.39)/3.2
(48.78-45.39)/3.3
pf(11.09, 2, 51, lower.tail = F)
qf(0.05, 2, 51, lower.tail = F)
qf(0.01, 2, 51, lower.tail = F)
qf(0.049, 2, 51, lower.tail = F)
qf(0.05, 2, 51, lower.tail = F)
pf(q = 3.23, 2, 51, lower.tail = F)
pf(q = 3.234, 2, 51, lower.tail = F)
qf(0.05, 2, 51, lower.tail = F)
qf(0.05, 2, 51, lower.tail = F)/sqrt(2)
qt(0.05, df = 51, lower.tail = F)
qt(0.05, df = 51, lower.tail = F)/sqrt(2)
(48.78-45.39)/sqrt(5083.4/18)
(48.78-45.39)/sqrt(5083.4/54)
(48.78-45.39)/sqrt(5083.4/18)
(48.78-45.39)/sqrt(2210.1/18)
(48.78-45.39)/sqrt(99.67/18)
(60.33-45.39)/sqrt(99.67/18)
(60.33-45.39)
sqrt(99.67/18)
(60.33-45.39)/sqrt(99.67/18)
(60.33-45.39)/sqrt(99.67/18)â„¢2
(60.33-45.39)/sqrt(99.67/18)*2
# n = 90
# dfnum = no. of groups - 1 = 3 - 1 = 2
# dfden = n - no. of groups = 90 - 3 = 87
# Mean squares
221.3/2
576.8/87
1105.05/99.67
(221.3/2)/(576.8/87)
pf(q = 16.68958, df1 = 2, df2 = 87, lower.tail = F)
1576.8/87 # 6.629885
(221.3/2)/(1576.8/87)
pf(q = 6.105118, df1 = 2, df2 = 87, lower.tail = F)
1576.8/87 # 6.629885
(221.3/2)/(1576.8/87)
pf(q = 6.105118, df1 = 2, df2 = 87, lower.tail = F)
qf(p = 0.05, df1 = 2, df2 = 87, lower.tail = F)
# n = 30
# dfnum = no. of groups - 1 = 3 - 1 = 2
# dfden = n - no. of groups = 30 - 3 = 27
# Mean squares
221.3/2 # 110.65
1576.8/27 # 18.12414
(221.3/2)/(1576.8/27)
pf(q = 1.894692, df1 = 2, df2 = 27, lower.tail = F)
qf(p = 0.05, df1 = 2, df2 = 27, lower.tail = F)
(221.3/2)/(576.8/27)
pf(q = 5.179525, df1 = 2, df2 = 27, lower.tail = F)
576.8/27 # 58.4
576.7/27 # 21.36296
576.3/27 # 21.36296
576.8/27 # 21.36296
(221.3/2)/(576.8/27)
(576.8/27)
(221.3/2)/(576.8/27)
110.65/21.36
pf(5.180, df1 = 2, df2 = 27, lower.tail = F)
## Compute the critical F-value of an F-distribution with 2 numerator degrees of freedom and 27 denominator degrees of freedom.
qf(p = 0.05, df1 = 2, df2 = 27, lower.tail = F)
## Compute the critical F-value of an F-distribution with 2 numerator degrees of freedom and 27 denominator degrees of freedom.
qf(p = 0.05, df1 = 2, df2 = 27, lower.tail = F)
## Compute the P-value associated with the F-statistic from the ANOVA model given the 2 and 27 degrees of freedom.
pf(5.180, df1 = 2, df2 = 27, lower.tail = F)
## Compute the P-value associated with the F-statistic from the ANOVA model given the 2 and 27 degrees of freedom.
pf(5.180, df1 = 2, df2 = 27, lower.tail = F)
dat <- data.frame(
copper_alloys = rep(c("A", "B", "C", "D", "E"), each = 20), # Predictor with 5 levels
cond = rnorm(100, mean = 5.8, sd = 1.5) # Response variable (normally distributed)
)
dat
library(tidyverse)
library(learnr)
library(tidyverse)
library(ggplot2)
library(emmeans)
library(multcomp)
library(kableExtra)
dat %>% group_by(copper_alloys) %>% mutate(cond = cond + rnorm(n = n(), mean = 0, sd = 0.5))
dat <- group_by(.data = dat, copper_alloys) %>% mutate(cond = cond + rnorm(n = n(), mean = 0, sd = 0.5))
dat
dat <- data.frame(
copper_alloys = rep(c("A", "B", "C", "D", "E"), each = 20), # Predictor with 5 levels
cond = rnorm(100, mean = 5.8, sd = 1.5) # Response variable (normally distributed)
)
dat <- group_by(.data = dat, copper_alloys) %>% mutate(cond = cond + rnorm(n = n(), mean = 0, sd = 0.5)) %>% as.data.frame()
str(dat)
dat <- data.frame(
copper_alloys = factor(rep(c("A", "B", "C", "D", "E"), each = 20)), # Predictor with 5 levels
cond = rnorm(100, mean = 5.8, sd = 1.5) # Response variable (normally distributed)
)
dat <- group_by(.data = dat, copper_alloys) %>% mutate(cond = cond + rnorm(n = n(), mean = 0, sd = 0.5)) %>% as.data.frame()
str(dat)
summary(lm(cond ~ copper_alloys, data = dat))
summary(aov(cond ~ copper_alloys, data = dat))
set.seed(123)
dat <- data.frame(
copper_alloys = factor(rep(c("A", "B", "C", "D", "E"), each = 20)), # Predictor with 5 levels
cond = rnorm(100, mean = 5.8, sd = 1.5) # Response variable (normally distributed)
)
dat <- group_by(.data = dat, copper_alloys) %>% mutate(cond = cond + rnorm(n = n(), mean = 0, sd = 0.5)) %>% as.data.frame()
str(dat)
summary(aov(cond ~ copper_alloys, data = dat))
set.seed(321)
dat <- data.frame(
copper_alloys = factor(rep(c("A", "B", "C", "D", "E"), each = 20)), # Predictor with 5 levels
cond = rnorm(100, mean = 5.8, sd = 1.5) # Response variable (normally distributed)
)
dat <- group_by(.data = dat, copper_alloys) %>% mutate(cond = cond + rnorm(n = n(), mean = 0, sd = 0.5)) %>% as.data.frame()
summary(aov(cond ~ copper_alloys, data = dat))
set.seed(111)
dat <- data.frame(
copper_alloys = factor(rep(c("A", "B", "C", "D", "E"), each = 20)), # Predictor with 5 levels
cond = rnorm(100, mean = 5.8, sd = 1.5) # Response variable (normally distributed)
)
dat <- group_by(.data = dat, copper_alloys) %>% mutate(cond = cond + rnorm(n = n(), mean = 0, sd = 0.5)) %>% as.data.frame()
summary(aov(cond ~ copper_alloys, data = dat))
set.seed(1)
dat <- data.frame(
copper_alloys = factor(rep(c("A", "B", "C", "D", "E"), each = 20)), # Predictor with 5 levels
cond = rnorm(100, mean = 5.8, sd = 1.5) # Response variable (normally distributed)
)
dat <- group_by(.data = dat, copper_alloys) %>% mutate(cond = cond + rnorm(n = n(), mean = 0, sd = 0.5)) %>% as.data.frame()
summary(aov(cond ~ copper_alloys, data = dat))
set.seed(2)
dat <- data.frame(
copper_alloys = factor(rep(c("A", "B", "C", "D", "E"), each = 20)), # Predictor with 5 levels
cond = rnorm(100, mean = 5.8, sd = 1.5) # Response variable (normally distributed)
)
dat <- group_by(.data = dat, copper_alloys) %>% mutate(cond = cond + rnorm(n = n(), mean = 0, sd = 0.5)) %>% as.data.frame()
summary(aov(cond ~ copper_alloys, data = dat))
set.seed(3)
dat <- data.frame(
copper_alloys = factor(rep(c("A", "B", "C", "D", "E"), each = 20)), # Predictor with 5 levels
cond = rnorm(100, mean = 5.8, sd = 1.5) # Response variable (normally distributed)
)
dat <- group_by(.data = dat, copper_alloys) %>% mutate(cond = cond + rnorm(n = n(), mean = 0, sd = 0.5)) %>% as.data.frame()
summary(aov(cond ~ copper_alloys, data = dat))
set.seed(4)
dat <- data.frame(
copper_alloys = factor(rep(c("A", "B", "C", "D", "E"), each = 20)), # Predictor with 5 levels
cond = rnorm(100, mean = 5.8, sd = 1.5) # Response variable (normally distributed)
)
dat <- group_by(.data = dat, copper_alloys) %>% mutate(cond = cond + rnorm(n = n(), mean = 0, sd = 0.5)) %>% as.data.frame()
summary(aov(cond ~ copper_alloys, data = dat))
set.seed(5)
dat <- data.frame(
copper_alloys = factor(rep(c("A", "B", "C", "D", "E"), each = 20)), # Predictor with 5 levels
cond = rnorm(100, mean = 5.8, sd = 1.5) # Response variable (normally distributed)
)
dat <- group_by(.data = dat, copper_alloys) %>% mutate(cond = cond + rnorm(n = n(), mean = 0, sd = 0.5)) %>% as.data.frame()
summary(aov(cond ~ copper_alloys, data = dat))
set.seed(6)
dat <- data.frame(
copper_alloys = factor(rep(c("A", "B", "C", "D", "E"), each = 20)), # Predictor with 5 levels
cond = rnorm(100, mean = 5.8, sd = 1.5) # Response variable (normally distributed)
)
dat <- group_by(.data = dat, copper_alloys) %>% mutate(cond = cond + rnorm(n = n(), mean = 0, sd = 0.5)) %>% as.data.frame()
summary(aov(cond ~ copper_alloys, data = dat))
set.seed(7)
dat <- data.frame(
copper_alloys = factor(rep(c("A", "B", "C", "D", "E"), each = 20)), # Predictor with 5 levels
cond = rnorm(100, mean = 5.8, sd = 1.5) # Response variable (normally distributed)
)
dat <- group_by(.data = dat, copper_alloys) %>% mutate(cond = cond + rnorm(n = n(), mean = 0, sd = 0.5)) %>% as.data.frame()
summary(aov(cond ~ copper_alloys, data = dat))
set.seed(8)
dat <- data.frame(
copper_alloys = factor(rep(c("A", "B", "C", "D", "E"), each = 20)), # Predictor with 5 levels
cond = rnorm(100, mean = 5.8, sd = 1.5) # Response variable (normally distributed)
)
dat <- group_by(.data = dat, copper_alloys) %>% mutate(cond = cond + rnorm(n = n(), mean = 0, sd = 0.5)) %>% as.data.frame()
summary(aov(cond ~ copper_alloys, data = dat))
set.seed(9)
dat <- data.frame(
copper_alloys = factor(rep(c("A", "B", "C", "D", "E"), each = 20)), # Predictor with 5 levels
cond = rnorm(100, mean = 5.8, sd = 1.5) # Response variable (normally distributed)
)
dat <- group_by(.data = dat, copper_alloys) %>% mutate(cond = cond + rnorm(n = n(), mean = 0, sd = 0.5)) %>% as.data.frame()
summary(aov(cond ~ copper_alloys, data = dat))
set.seed(9)
dat <- data.frame(
copper_alloys = factor(rep(c("A", "B", "C", "D", "E"), each = 20)), # Predictor with 5 levels
cond = rnorm(100, mean = 5.8, sd = 1.5) # Response variable (normally distributed)
)
dat <- group_by(.data = dat, copper_alloys) %>% mutate(cond = cond + rnorm(n = n(), mean = 0, sd = 0.5)) %>% as.data.frame()
summary(aov(cond ~ copper_alloys, data = dat))
set.seed(10)
dat <- data.frame(
copper_alloys = factor(rep(c("A", "B", "C", "D", "E"), each = 20)), # Predictor with 5 levels
cond = rnorm(100, mean = 5.8, sd = 1.5) # Response variable (normally distributed)
)
dat <- group_by(.data = dat, copper_alloys) %>% mutate(cond = cond + rnorm(n = n(), mean = 0, sd = 0.5)) %>% as.data.frame()
summary(aov(cond ~ copper_alloys, data = dat))
dat
set.seed(10)
copper <- data.frame(
alloys = factor(rep(c("A", "B", "C", "D", "E"), each = 20)), # Predictor with 5 levels
cond = rnorm(100, mean = 5.8, sd = 1.5) # Response variable (normally distributed)
)
dat <- group_by(.data = copper, alloys) %>% mutate(cond = cond + rnorm(n = n(), mean = 0, sd = 0.5)) %>% as.data.frame()
summary(aov(cond ~ alloys, data = dat))
set.seed(10)
copper <- data.frame(
alloys = factor(rep(c("A", "B", "C", "D", "E"), each = 20)), # Predictor with 5 levels
cond = rnorm(100, mean = 5.8, sd = 1.5) # Response variable (normally distributed)
)
dat <- group_by(.data = copper, alloys) %>% mutate(cond = cond + rnorm(n = n(), mean = 0, sd = 0.5)) %>% as.data.frame()
summary(aov(cond ~ alloys, data = copper))
set.seed(10)
copper <- data.frame(
alloys = factor(rep(c("A", "B", "C", "D", "E"), each = 20)), # Predictor with 5 levels
cond = rnorm(100, mean = 5.8, sd = 1.5) # Response variable (normally distributed)
)
dat <- group_by(.data = copper, alloys) %>% mutate(cond = cond + rnorm(n = n(), mean = 0, sd = 0.5)) %>% as.data.frame()
summary(aov(cond ~ alloys, data = copper))
set.seed(10)
copper <- data.frame(
alloys = factor(rep(c("A", "B", "C", "D", "E"), each = 20)), # Predictor with 5 levels
cond = rnorm(100, mean = 5.8, sd = 1.5) # Response variable (normally distributed)
)
copper <- group_by(.data = copper, alloys) %>% mutate(cond = cond + rnorm(n = n(), mean = 0, sd = 0.5)) %>% as.data.frame()
summary(aov(cond ~ alloys, data = copper))
copper
boxplot(cond ~ alloy, data = copper)
set.seed(10)
copper <- data.frame(
alloy = factor(rep(c("A", "B", "C", "D", "E"), each = 20)), # Predictor with 5 levels
cond = rnorm(100, mean = 5.8, sd = 1.5) # Response variable (normally distributed)
)
copper <- group_by(.data = copper, alloys) %>% mutate(cond = cond + rnorm(n = n(), mean = 0, sd = 0.5)) %>% as.data.frame()
set.seed(10)
copper <- data.frame(
alloy = factor(rep(c("A", "B", "C", "D", "E"), each = 20)), # Predictor with 5 levels
cond = rnorm(100, mean = 5.8, sd = 1.5) # Response variable (normally distributed)
)
copper <- group_by(.data = copper, alloy) %>% mutate(cond = cond + rnorm(n = n(), mean = 0, sd = 0.5)) %>% as.data.frame()
summary(aov(cond ~ alloy, data = copper))
boxplot(cond ~ alloy, data = copper)
summary(m1 <- aov(cond ~ alloy, data = copper))
plot(m1)
TukeyHSD(m1)
ems <- emmeans(m1, specs = ~ alloy)
pairs(ems)
pairs(ems, adjust = "fdr")
setwd("~/Documents/Book_exercises/Ch10")
set.seed(10)
copper <- data.frame(
alloy = factor(rep(c("A", "B", "C", "D", "E"), each = 20)), # Predictor with 5 levels
cond = rnorm(100, mean = 5.8, sd = 1.5) # Response variable (normally distributed)
)
copper <- group_by(.data = copper, alloy) %>% mutate(cond = cond + rnorm(n = n(), mean = 0, sd = 0.5)) %>% as.data.frame()
write.csv(copper, "copper.csv", row.names = F)
copper <- read.csv("copper.csv")
rm(copper)
copper <- read.csv("copper.csv")
head(copper)
str(copper)
head(copper, n = 3)
str(copper)
## Recode 'alloy' as a factor (categorical variable)
copper$alloy <- as.factor(copper$alloy)
str(copper)
summary(copper)
m1 <- aov(cond ~ alloy, data = copper)
summary(m1)
m1 <- lm(cond ~ alloy, data = copper)
anova(m1)
summary.aov(m1) # same as summary.aov()
## b. Diagnostic plots
par(mfrow = c(2, 2))
plot(m1)
## a. Exploratory plot
boxplot(cond ~ alloy, data = copper)
## a. Exploratory plot
boxplot(cond ~ alloy, data = copper)
ggplot(data = copper, mapping = aes(x = alloy, y = cond)) +
geom_boxplot()
## d. Post hoc analysis (given the overall significance of the alloy effect of P = 0.0114)
TukeyHSD(m1)
## b. Run one-way ANOVA
m1 <- aov(cond ~ alloy, data = copper)
summary(m1)
## d. Post hoc analysis (given the overall significance of the alloy effect of P = 0.0114)
TukeyHSD(m1)
ems <- emmeans(m1, specs = "alloy")
pairs(ems, adjust = "fdr")
pairs(ems)
## d. Post hoc analysis (given the overall significance of the alloy effect of P = 0.0114)
TukeyHSD(m1)
cld(pairs(ems))
cld(pairs(ems), Letters = letters)
cld(ems, Letters = letters)
cld(ems, Letters = letters, sort = F)
cld(ems, Letters = letters)
LETTERS[1:5]
class(cld(ems, Letters = letters)
)
## e. Publication-quality figure incl. statistical annotation showing the results of the post hoc comparison
stats <- cld(ems, Letters = letters)
stats %>% arrange(desc(alloy))
stats %>% arrange(alloy)
## e. Publication-quality figure incl. statistical annotation showing the results of the post hoc comparison
posthoc <- cld(ems, Letters = letters)
stats <- arrange(.data = posthoc, alloy)
stats
?geom_text
ggplot(data = copper, mapping = aes(x = alloy, y = cond)) +
geom_boxplot() +
geom_text(data = stats, aes(x = alloy, label = .group))
## Sort dataset in ascending fashion so that alloy A comes first and E last
stats <- arrange(.data = posthoc, alloy) %>% mutate(cond = NA)
stats
ggplot(data = copper, mapping = aes(x = alloy, y = cond)) +
geom_boxplot() +
geom_text(data = stats, aes(x = alloy, label = .group))
ggplot(data = copper, mapping = aes(x = alloy, y = cond)) +
geom_boxplot() +
geom_text(data = stats, aes(x = alloy, y = cond, label = .group))
group_by(copper, alloy) %>% summarise(cond = meand(cond))
group_by(copper, alloy) %>% summarise(cond = mean(cond))
## Sort dataset in ascending fashion so that alloy A comes first and E last
stats <- arrange(.data = posthoc, alloy) %>% mutate(cond = group_by(copper, alloy) %>% summarise(cond = mean(cond)))
stats
## e. Publication-quality figure incl. statistical annotation showing the results of the post hoc comparison
posthoc <- cld(ems, Letters = letters)
## Sort dataset in ascending fashion so that alloy A comes first and E last
stats <- arrange(.data = posthoc, alloy) %>% mutate(cond = pull(group_by(copper, alloy) %>% summarise(cond = mean(cond))))
stats
## Sort dataset in ascending fashion so that alloy A comes first and E last
stats <- arrange(.data = posthoc, alloy) %>% mutate(cond = pull(group_by(copper, alloy) %>% summarise(cond = max(cond))))
stats
ggplot(data = copper, mapping = aes(x = alloy, y = cond)) +
geom_boxplot() +
geom_text(data = stats, aes(x = alloy, y = cond, label = .group))
ggplot(data = copper, mapping = aes(x = alloy, y = cond)) +
geom_boxplot() +
geom_text(data = stats, aes(x = alloy, y = cond, label = .group), nudge_y = 0.5)
## Sort dataset in ascending fashion so that alloy A comes first and E last
stats <- arrange(.data = posthoc, alloy)
stats
str_trim(.group)
mutate(.data = stats, sig = str_trim(.group))
## Get maximum cond values to guide the placement of the stats annotations
m <- pull(group_by(copper, alloy) %>% summarise(cond = max(cond)))
stats <- mutate(.data = stats, cond = m)
stats
## e. Publication-quality figure incl. statistical annotation showing the results of the post hoc comparison
posthoc <- cld(ems, Letters = letters)
## We could have done this all in one go like this:
stats <- arrange(.data = posthoc, alloy) %>% mutate(sig = str_trim(.group),  pull(group_by(copper, alloy) %>% summarise(cond = max(cond))))
stats
rm(stats)
## We could have done this all in one go like this:
stats <- arrange(.data = posthoc, alloy) %>% mutate(sig = str_trim(.group), cond = pull(group_by(copper, alloy) %>% summarise(cond = max(cond))))
stats
## We could have done this all in one go like this:
stats <- arrange(.data = posthoc, alloy) %>%
mutate(sig = str_trim(.group), cond = pull(group_by(copper, alloy) %>%
summarise(cond = max(cond))))
ggplot(data = copper, mapping = aes(x = alloy, y = cond)) +
geom_boxplot() +
geom_text(data = stats, aes(x = alloy, y = cond, label = sig), nudge_y = 0.5)
ggplot(data = copper, mapping = aes(x = alloy, y = cond)) +
geom_boxplot() +
geom_text(data = stats, aes(x = alloy, y = cond, label = sig), nudge_y = 0.5) +
labs(x = "Alloy variety", y = expression(paste("Electrical conductivity (10"^7, "S m"^-1, ")")))
ggplot(data = copper, mapping = aes(x = alloy, y = cond)) +
geom_boxplot() +
geom_text(data = stats, aes(x = alloy, y = cond, label = sig), nudge_y = 0.5) +
labs(x = "Alloy variety", y = expression(paste("Electrical conductivity (10"^7, " S m"^-1, ")")))
ggplot(data = copper, mapping = aes(x = alloy, y = cond)) +
geom_boxplot() +
geom_text(data = stats, aes(x = alloy, y = cond, label = sig), nudge_y = 0.5) +
labs(x = "Alloy variety", y = expression(paste("Electrical conductivity (\u0013 10"^7, " S m"^-1, ")")))
ggplot(data = copper, mapping = aes(x = alloy, y = cond)) +
geom_boxplot() +
geom_text(data = stats, aes(x = alloy, y = cond, label = sig), nudge_y = 0.5) +
labs(x = "Alloy variety", y = expression(paste("Electrical conductivity (\u00D7 10"^7, " S m"^-1, ")")))
ggplot(data = copper, mapping = aes(x = alloy, y = cond)) +
geom_boxplot() +
geom_text(data = stats, aes(x = alloy, y = cond, label = sig), nudge_y = 0.5) +
labs(x = "Alloy variety", y = expression(paste("Electrical conductivity (\u00D710"^7, " S m"^-1, ")")))
ggplot(data = copper, mapping = aes(x = alloy, y = cond)) +
geom_boxplot() +
geom_text(data = stats, aes(x = alloy, y = cond, label = sig), nudge_y = 0.5) +
labs(x = "Alloy variety", y = expression(paste("Electrical conductivity (\u00D7 10"^7, " S m"^-1, ")")))
ggplot(data = copper, mapping = aes(x = alloy, y = cond)) +
geom_boxplot() +
geom_text(data = stats, aes(x = alloy, y = cond, label = sig), nudge_y = 0.5) +
labs(x = "Alloy variety", y = expression(paste("Electrical conductivity (\u00D710"^7, " S m"^-1, ")")))
ggplot(data = copper, mapping = aes(x = alloy, y = cond)) +
geom_boxplot() +
geom_text(data = stats, aes(x = alloy, y = cond, label = sig), nudge_y = 0.5) +
labs(x = "Alloy variety", y = expression(paste("Electrical conductivity (\u00D7 10"^7, " S m"^-1, ")")))
ggplot(data = copper, mapping = aes(x = alloy, y = cond)) +
geom_boxplot() +
geom_text(data = stats, aes(x = alloy, y = cond, label = sig), nudge_y = 0.5) +
labs(x = "Alloy variety", y = expression(paste("Electrical conductivity (\u00D7 10"^7, " S m"^-1, ")"))) +
theme_test()
ggplot(data = copper, mapping = aes(x = alloy, y = cond)) +
geom_boxplot(fill = "grey") +
geom_text(data = stats, aes(x = alloy, y = cond, label = sig), nudge_y = 0.5) +
labs(x = "Alloy variety", y = expression(paste("Electrical conductivity (\u00D7 10"^7, " S m"^-1, ")"))) +
theme_test()
ggplot(data = copper, mapping = aes(x = alloy, y = cond)) +
geom_boxplot(fill = "grey75") +
geom_text(data = stats, aes(x = alloy, y = cond, label = sig), nudge_y = 0.5) +
labs(x = "Alloy variety", y = expression(paste("Electrical conductivity (\u00D7 10"^7, " S m"^-1, ")"))) +
theme_test()
ggplot(data = copper, mapping = aes(x = alloy, y = cond)) +
geom_boxplot(fill = "grey") +
geom_text(data = stats, aes(x = alloy, y = cond, label = sig), nudge_y = 0.5) +
labs(x = "Alloy variety", y = expression(paste("Electrical conductivity (\u00D7 10"^7, " S m"^-1, ")"))) +
theme_test()
summary(aov(weight ~ group, data = PlantGrowth))
PlantGrowth
## b. Perform a one-way ANOVA
m1 <- aov(cond ~ alloy, data = copper)
summary(m1)
copper
## b. Perform a one-way ANOVA
m1 <- aov(cond ~ alloy, data = copper)
summary(m1)
pf(3.44, 4, 95, lower.tail = F)
pf(4.64, 2, 48, lower.tail = F)
group_by(copper, alloy) %>% summarise(cond = max(cond))
group_by(copper, alloy) %>% summarise(cond = mean(cond))
group_by(copper, alloy) %>% summarise(cond = mean(cond)) %>% mutate(change = cond/cond[2])
group_by(copper, alloy) %>% summarise(cond = mean(cond)) %>% mutate(change = 1-cond/cond[2])
group_by(copper, alloy) %>% summarise(cond = mean(cond)) %>% mutate(change = cond[2]/cond)
group_by(copper, alloy) %>% summarise(cond = mean(cond)) %>% mutate(change = 1- cond[2]/cond)
group_by(copper, alloy) %>% summarise(cond = mean(cond)) %>% mutate(change = 1- cond[2]/cond*100)
group_by(copper, alloy) %>% summarise(cond = mean(cond)) %>% mutate(change = (1 - cond[2]/cond)*100)
(5.82-4.58)/5.82
group_by(copper, alloy) %>% summarise(cond = mean(cond)) %>% mutate(change = (1 - cond[2]/cond)*100)
locs <- function(x) { c("Alluvial", "Terrace") }  # custom facet labels
(5.82-4.58)/5.82
locs <- function(x) { c("Alluvial", "Terrace") }  # custom facet labels
stats <- group_by(soilp, loc, horizon) %>% summarise(max = max(p)) %>% add_column(sig = c("b", "a", "a", "b", "b", "a"))
ggplot(data = soilp, mapping = aes(x = horizon, y = p)) +
geom_boxplot() +
geom_text(data = stats, aes(x = horizon, y = max, label = sig), nudge_y = 15, size = 4) +
labs(y = expression(paste("Soil phosphorus (mg kg"^-1, ")")), x = "Soil horizon") +
facet_wrap(facets = ~ loc, labeller = labeller(loc = locs)) +
theme_test()
## Read in data
soilp <- read.csv("soil.csv")
locs <- function(x) { c("Alluvial", "Terrace") }  # custom facet labels
stats <- group_by(soilp, loc, horizon) %>% summarise(max = max(p)) %>% add_column(sig = c("b", "a", "a", "b", "b", "a"))
ggplot(data = soilp, mapping = aes(x = horizon, y = p)) +
geom_boxplot() +
geom_text(data = stats, aes(x = horizon, y = max, label = sig), nudge_y = 15, size = 4) +
labs(y = expression(paste("Soil phosphorus (mg kg"^-1, ")")), x = "Soil horizon") +
facet_wrap(facets = ~ loc, labeller = labeller(loc = locs)) +
theme_test()
## b. Fit a two-way ANOVA model with interaction
m1 <- lm(p ~ loc * horizon, data = soilp)
## Check model results
summary(m1) # Does not give us an overall P-value of the interaction term.
anova(m1) # Valid for the interaction term, but as the sequence of predictors in the model formula matter, their P-values change when their order changes in the model.
drop1(m1, test = "F") # This likelihood ratio test approach overcomes the 'sequence of predictors issue' and should routinely be used.
## d. Post hoc analysis
ems <- emmeans(object = m1, specs = "horizon", by = "loc")
ems
pairs(ems, adjust = "fdr") # fdr = false discovery rate method (more powerful than other multiplicity adjustments such as the bonferroni method)
ems <- emmeans(object = m1, specs = "loc", by = "horizon")
ems
pairs(ems, adjust = "fdr") # fdr = false discovery rate method (more powerful than other multiplicity adjustments such as the bonferroni method)
ems <- emmeans(object = m1, specs = ~ loc * horizon)
ems
pairs(ems, adjust = "fdr") # fdr = false discovery rate method (more powerful than other multiplicity adjustments such as the bonferroni method)
## Get significance letters for statistical annotation of the figure
cld(ems, Letters = letters, adjust = "fdr")
## d. Post hoc analysis
ems <- emmeans(object = m1, specs = "horizon", by = "loc")
pairs(ems, adjust = "fdr") # fdr = false discovery rate method (more powerful than other multiplicity adjustments such as the bonferroni method)
ems <- emmeans(object = m1, specs = "loc", by = "horizon")
pairs(ems, adjust = "fdr") # fdr = false discovery rate method (more powerful than other multiplicity adjustments such as the bonferroni method)
ems <- emmeans(object = m1, specs = ~ loc * horizon)
pairs(ems, adjust = "fdr") # fdr = false discovery rate method (more powerful than other multiplicity adjustments such as the bonferroni method)
## Get significance letters for statistical annotation of the figure
cld(ems, Letters = letters, adjust = "fdr")
## d. Post hoc analysis. We can slice the interaction in two ways: i) pairwise comparisons of the horizons with a given soil type or ii) compare the two soil types within each horizon. In cases where it makes sense like in this example, we can also ask for all pairwise comparisons.
ems <- emmeans(object = m1, specs = "horizon", by = "loc")
pairs(ems, adjust = "fdr") # fdr = false discovery rate method (more powerful than other multiplicity adjustments such as the bonferroni method)
ems3
## d. Post hoc analysis. We can slice the interaction in two ways: i) pairwise comparisons of the horizons with a given soil type or ii) compare the two soil types within each horizon. In cases where it makes sense like in this example, we can also ask for all possible pairwise comparisons.
ems1 <- emmeans(object = m1, specs = "horizon", by = "loc") # compare horizons within soil type
ems2 <- emmeans(object = m1, specs = "loc", by = "horizon") # compare soil types within horizon
ems3 <- emmeans(object = m1, specs = ~ loc * horizon) # get all possible pairwise comparison
ems1
ems2
ems3
ems2
ems3
pairs(ems3, adjust = "fdr") # fdr = false discovery rate method (more powerful than other multiplicity adjustments such as the bonferroni method)
## Get significance letters for statistical annotation of the figure
cld(ems, Letters = letters, adjust = "fdr")
## Get significance letters for statistical annotation of the figure
cld(ems3, Letters = letters, adjust = "fdr")
locs <- function(x) { c("Alluvial", "Terrace") }  # custom facet labels
stats <- group_by(soilp, loc, horizon) %>% summarise(max = max(p)) %>% add_column(sig = c("c", "b", "ab", "b", "ab", "a"))
ggplot(data = soilp, mapping = aes(x = horizon, y = p)) +
geom_boxplot() +
geom_text(data = stats, aes(x = horizon, y = max, label = sig), nudge_y = 15, size = 4) +
labs(y = expression(paste("Soil phosphorus (mg kg"^-1, ")")), x = "Soil horizon") +
facet_wrap(facets = ~ loc, labeller = labeller(loc = locs)) +
theme_test()
<p style="margin-top:10px">
